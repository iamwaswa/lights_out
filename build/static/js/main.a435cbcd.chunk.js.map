{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","defaultProps","alert","Board","state","board","createBoard","hasWon","handleRestart","_this2","row","nRows","currentRow","Array","nCols","fill","map","Math","random","chanceLightStartsOn","push","_this3","Fragment","rowIndex","key","colIndex","src_Cell_0","concat","renderRestartButton","setState","col","_this$props","flipCell","_ref","validRow","validCol","every","first","second","renderBoard","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a435cbcd.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  static defaultProps = {\n    flipCellsAroundMe: () => {\n      alert(`Function not passed down as props!`);\n    },\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render(){\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n      <td \n        className={classes} \n        onClick={this.handleClick} \n      />\n    );\n  }\n}\n\nexport default Cell;","import React, {Component} from \"react\";\nimport Cell from './Cell';\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: 0.25,\n  };\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      board: this.createBoard(),\n      hasWon: false,\n    }\n\n    this.flipCellsAroundMe = this.flipCellsAroundMe.bind(this);\n    this.handleRestart = this.handleRestart.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n\n    // TODO: create array-of-arrays of true/false values\n    for (let row = 0; row < this.props.nRows; row++) {\n      const currentRow = Array(this.props.nCols).fill(null).map(() => {\n        return Math.random() < this.props.chanceLightStartsOn ?\n          true\n          :\n          false;\n      });\n\n      board.push(currentRow);\n    }\n\n    return board;\n  }\n\n  renderBoard() {\n    return (\n      <>\n        <table\n          className={ `Board` }\n        >\n          <tbody>\n          {\n            this.state.board.map((row, rowIndex) => {\n              return (\n                <tr\n                  key={ rowIndex }\n                >\n                {\n                  row.map((isLit, colIndex) => {\n                    return (\n                      <Cell \n                        key={ `${rowIndex}-${colIndex}` }\n                        flipCellsAroundMe={ () => this.flipCellsAroundMe(rowIndex, colIndex) }\n                        isLit={ isLit }\n                      /> \n                    );\n                  })\n                }\n                </tr>\n              );  \n            })\n          }\n          </tbody>\n        </table>\n        { this.renderRestartButton() }\n      </>\n    );\n  }\n\n  renderRestartButton() {\n    return (\n      <button\n        onClick={ this.handleRestart }\n      >\n        Restart\n      </button>\n    )\n  }\n\n  handleRestart() {\n    this.setState({\n      board: this.createBoard(),\n      hasWon: false,\n    });\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAroundMe(row, col) {\n    // TODO: flip this cell and the cells around it\n    const { nRows, nCols } = this.props;\n    \n    function validRow(row) {\n      return row >= 0 && row < nRows;\n    }\n    \n    function validCol(col) {\n      return col >= 0 && col < nCols;\n    }\n    \n    // if this cell is actually on board, flip it\n    const board = this.state.board;\n    function flipCell({ row, col }) {\n      if (validRow(row) && validCol(col)) {\n        board[row][col] = !board[row][col];\n      }\n    }\n      \n    const current = { row, col };\n    flipCell(current);\n\n    const above = { row: row - 1, col };\n    flipCell(above);\n\n    const below = { row: row + 1, col };\n    flipCell(below);\n\n    const left = { row, col: col - 1 };\n    flipCell(left);\n\n    const right = { row, col: col + 1 };\n    flipCell(right);\n\n    // TODO: determine is the game has been won\n    // win when every cell is turned off\n    const hasWon = board.every((row) => {\n      return row.every((isLit) => {\n        return !isLit;\n      });\n    });\n\n    this.setState({\n      board,\n      hasWon,\n    });\n  }\n\n  matchCoordinates(first, second) {\n    return first.rowIndex === second.rowIndex &&\n           first.colIndex === second.colIndex;\n  }\n\n  /** Render game board or winning message. */\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n    if (this.state.hasWon) {\n      return (\n        <>\n\n          <section\n            className='container'\n          >\n            <span\n              className='neon-win-orange'\n            >\n              You\n            </span>\n            <span\n              className = 'neon-win-blue'\n            >\n              Win!\n            </span>\n          </section>\n          { this.renderRestartButton() }\n        </>\n      );\n    }\n\n    // TODO\n\n    // make table board\n\n    // TODO\n    return this.renderBoard();\n  }\n}\n\nexport default Board;","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <h1>\n          <span\n            className='neon-orange'\n          >\n            Lights\n          </span>\n          <span\n            className='neon-blue'\n          >\n            Out\n          </span>\n        </h1>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}